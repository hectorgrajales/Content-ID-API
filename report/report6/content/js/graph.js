/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 173.0, "minX": 0.0, "maxY": 4829.0, "series": [{"data": [[0.0, 173.0], [0.1, 173.0], [0.2, 174.0], [0.3, 178.0], [0.4, 179.0], [0.5, 179.0], [0.6, 180.0], [0.7, 181.0], [0.8, 181.0], [0.9, 181.0], [1.0, 181.0], [1.1, 182.0], [1.2, 182.0], [1.3, 183.0], [1.4, 184.0], [1.5, 184.0], [1.6, 184.0], [1.7, 184.0], [1.8, 184.0], [1.9, 184.0], [2.0, 184.0], [2.1, 184.0], [2.2, 185.0], [2.3, 185.0], [2.4, 185.0], [2.5, 185.0], [2.6, 186.0], [2.7, 186.0], [2.8, 186.0], [2.9, 186.0], [3.0, 186.0], [3.1, 186.0], [3.2, 186.0], [3.3, 186.0], [3.4, 186.0], [3.5, 186.0], [3.6, 186.0], [3.7, 186.0], [3.8, 187.0], [3.9, 187.0], [4.0, 187.0], [4.1, 187.0], [4.2, 187.0], [4.3, 188.0], [4.4, 188.0], [4.5, 188.0], [4.6, 188.0], [4.7, 188.0], [4.8, 188.0], [4.9, 188.0], [5.0, 188.0], [5.1, 188.0], [5.2, 189.0], [5.3, 189.0], [5.4, 189.0], [5.5, 189.0], [5.6, 189.0], [5.7, 189.0], [5.8, 189.0], [5.9, 189.0], [6.0, 189.0], [6.1, 189.0], [6.2, 190.0], [6.3, 190.0], [6.4, 190.0], [6.5, 190.0], [6.6, 190.0], [6.7, 191.0], [6.8, 191.0], [6.9, 191.0], [7.0, 191.0], [7.1, 191.0], [7.2, 191.0], [7.3, 191.0], [7.4, 192.0], [7.5, 192.0], [7.6, 192.0], [7.7, 192.0], [7.8, 192.0], [7.9, 192.0], [8.0, 192.0], [8.1, 192.0], [8.2, 192.0], [8.3, 192.0], [8.4, 193.0], [8.5, 193.0], [8.6, 193.0], [8.7, 193.0], [8.8, 193.0], [8.9, 193.0], [9.0, 193.0], [9.1, 193.0], [9.2, 193.0], [9.3, 193.0], [9.4, 193.0], [9.5, 193.0], [9.6, 193.0], [9.7, 194.0], [9.8, 194.0], [9.9, 194.0], [10.0, 194.0], [10.1, 194.0], [10.2, 194.0], [10.3, 194.0], [10.4, 194.0], [10.5, 194.0], [10.6, 194.0], [10.7, 194.0], [10.8, 194.0], [10.9, 194.0], [11.0, 194.0], [11.1, 194.0], [11.2, 194.0], [11.3, 195.0], [11.4, 195.0], [11.5, 195.0], [11.6, 195.0], [11.7, 195.0], [11.8, 195.0], [11.9, 195.0], [12.0, 195.0], [12.1, 195.0], [12.2, 195.0], [12.3, 196.0], [12.4, 196.0], [12.5, 196.0], [12.6, 196.0], [12.7, 196.0], [12.8, 197.0], [12.9, 197.0], [13.0, 197.0], [13.1, 197.0], [13.2, 197.0], [13.3, 197.0], [13.4, 197.0], [13.5, 197.0], [13.6, 197.0], [13.7, 197.0], [13.8, 197.0], [13.9, 197.0], [14.0, 197.0], [14.1, 197.0], [14.2, 197.0], [14.3, 197.0], [14.4, 197.0], [14.5, 197.0], [14.6, 197.0], [14.7, 198.0], [14.8, 198.0], [14.9, 198.0], [15.0, 198.0], [15.1, 198.0], [15.2, 198.0], [15.3, 198.0], [15.4, 198.0], [15.5, 198.0], [15.6, 199.0], [15.7, 199.0], [15.8, 199.0], [15.9, 199.0], [16.0, 199.0], [16.1, 200.0], [16.2, 200.0], [16.3, 200.0], [16.4, 200.0], [16.5, 200.0], [16.6, 200.0], [16.7, 200.0], [16.8, 200.0], [16.9, 200.0], [17.0, 200.0], [17.1, 201.0], [17.2, 201.0], [17.3, 201.0], [17.4, 201.0], [17.5, 201.0], [17.6, 201.0], [17.7, 201.0], [17.8, 201.0], [17.9, 201.0], [18.0, 201.0], [18.1, 201.0], [18.2, 202.0], [18.3, 202.0], [18.4, 202.0], [18.5, 202.0], [18.6, 202.0], [18.7, 202.0], [18.8, 202.0], [18.9, 202.0], [19.0, 203.0], [19.1, 203.0], [19.2, 203.0], [19.3, 203.0], [19.4, 203.0], [19.5, 203.0], [19.6, 204.0], [19.7, 204.0], [19.8, 204.0], [19.9, 204.0], [20.0, 204.0], [20.1, 204.0], [20.2, 204.0], [20.3, 204.0], [20.4, 204.0], [20.5, 204.0], [20.6, 204.0], [20.7, 204.0], [20.8, 204.0], [20.9, 204.0], [21.0, 205.0], [21.1, 205.0], [21.2, 205.0], [21.3, 205.0], [21.4, 205.0], [21.5, 205.0], [21.6, 205.0], [21.7, 205.0], [21.8, 205.0], [21.9, 205.0], [22.0, 205.0], [22.1, 205.0], [22.2, 205.0], [22.3, 205.0], [22.4, 205.0], [22.5, 205.0], [22.6, 206.0], [22.7, 206.0], [22.8, 206.0], [22.9, 206.0], [23.0, 206.0], [23.1, 206.0], [23.2, 206.0], [23.3, 206.0], [23.4, 206.0], [23.5, 206.0], [23.6, 206.0], [23.7, 206.0], [23.8, 206.0], [23.9, 206.0], [24.0, 206.0], [24.1, 206.0], [24.2, 206.0], [24.3, 206.0], [24.4, 207.0], [24.5, 207.0], [24.6, 207.0], [24.7, 207.0], [24.8, 207.0], [24.9, 207.0], [25.0, 207.0], [25.1, 207.0], [25.2, 207.0], [25.3, 207.0], [25.4, 208.0], [25.5, 208.0], [25.6, 208.0], [25.7, 208.0], [25.8, 208.0], [25.9, 208.0], [26.0, 208.0], [26.1, 208.0], [26.2, 208.0], [26.3, 208.0], [26.4, 208.0], [26.5, 208.0], [26.6, 208.0], [26.7, 209.0], [26.8, 209.0], [26.9, 209.0], [27.0, 209.0], [27.1, 209.0], [27.2, 209.0], [27.3, 209.0], [27.4, 209.0], [27.5, 210.0], [27.6, 210.0], [27.7, 210.0], [27.8, 210.0], [27.9, 210.0], [28.0, 211.0], [28.1, 211.0], [28.2, 211.0], [28.3, 211.0], [28.4, 211.0], [28.5, 211.0], [28.6, 211.0], [28.7, 211.0], [28.8, 211.0], [28.9, 212.0], [29.0, 212.0], [29.1, 212.0], [29.2, 212.0], [29.3, 212.0], [29.4, 212.0], [29.5, 212.0], [29.6, 212.0], [29.7, 212.0], [29.8, 212.0], [29.9, 212.0], [30.0, 212.0], [30.1, 212.0], [30.2, 212.0], [30.3, 213.0], [30.4, 213.0], [30.5, 213.0], [30.6, 213.0], [30.7, 213.0], [30.8, 213.0], [30.9, 213.0], [31.0, 213.0], [31.1, 213.0], [31.2, 213.0], [31.3, 213.0], [31.4, 213.0], [31.5, 213.0], [31.6, 214.0], [31.7, 214.0], [31.8, 214.0], [31.9, 214.0], [32.0, 214.0], [32.1, 214.0], [32.2, 214.0], [32.3, 214.0], [32.4, 214.0], [32.5, 214.0], [32.6, 215.0], [32.7, 215.0], [32.8, 215.0], [32.9, 215.0], [33.0, 215.0], [33.1, 215.0], [33.2, 215.0], [33.3, 216.0], [33.4, 216.0], [33.5, 216.0], [33.6, 216.0], [33.7, 216.0], [33.8, 217.0], [33.9, 217.0], [34.0, 217.0], [34.1, 218.0], [34.2, 218.0], [34.3, 218.0], [34.4, 218.0], [34.5, 218.0], [34.6, 218.0], [34.7, 218.0], [34.8, 219.0], [34.9, 219.0], [35.0, 219.0], [35.1, 219.0], [35.2, 219.0], [35.3, 220.0], [35.4, 220.0], [35.5, 220.0], [35.6, 220.0], [35.7, 220.0], [35.8, 220.0], [35.9, 220.0], [36.0, 221.0], [36.1, 221.0], [36.2, 221.0], [36.3, 221.0], [36.4, 222.0], [36.5, 222.0], [36.6, 222.0], [36.7, 222.0], [36.8, 222.0], [36.9, 222.0], [37.0, 222.0], [37.1, 222.0], [37.2, 222.0], [37.3, 223.0], [37.4, 223.0], [37.5, 223.0], [37.6, 223.0], [37.7, 223.0], [37.8, 223.0], [37.9, 224.0], [38.0, 224.0], [38.1, 224.0], [38.2, 224.0], [38.3, 224.0], [38.4, 224.0], [38.5, 224.0], [38.6, 224.0], [38.7, 224.0], [38.8, 224.0], [38.9, 224.0], [39.0, 224.0], [39.1, 225.0], [39.2, 225.0], [39.3, 225.0], [39.4, 225.0], [39.5, 225.0], [39.6, 225.0], [39.7, 225.0], [39.8, 226.0], [39.9, 226.0], [40.0, 226.0], [40.1, 226.0], [40.2, 226.0], [40.3, 226.0], [40.4, 226.0], [40.5, 227.0], [40.6, 227.0], [40.7, 227.0], [40.8, 227.0], [40.9, 227.0], [41.0, 228.0], [41.1, 228.0], [41.2, 228.0], [41.3, 228.0], [41.4, 228.0], [41.5, 228.0], [41.6, 228.0], [41.7, 228.0], [41.8, 228.0], [41.9, 228.0], [42.0, 228.0], [42.1, 228.0], [42.2, 228.0], [42.3, 229.0], [42.4, 229.0], [42.5, 229.0], [42.6, 229.0], [42.7, 229.0], [42.8, 229.0], [42.9, 229.0], [43.0, 230.0], [43.1, 230.0], [43.2, 230.0], [43.3, 230.0], [43.4, 230.0], [43.5, 230.0], [43.6, 230.0], [43.7, 231.0], [43.8, 231.0], [43.9, 231.0], [44.0, 231.0], [44.1, 231.0], [44.2, 231.0], [44.3, 232.0], [44.4, 232.0], [44.5, 232.0], [44.6, 232.0], [44.7, 233.0], [44.8, 233.0], [44.9, 233.0], [45.0, 233.0], [45.1, 233.0], [45.2, 233.0], [45.3, 233.0], [45.4, 233.0], [45.5, 233.0], [45.6, 233.0], [45.7, 233.0], [45.8, 233.0], [45.9, 233.0], [46.0, 234.0], [46.1, 234.0], [46.2, 234.0], [46.3, 234.0], [46.4, 234.0], [46.5, 234.0], [46.6, 234.0], [46.7, 234.0], [46.8, 235.0], [46.9, 235.0], [47.0, 235.0], [47.1, 235.0], [47.2, 235.0], [47.3, 235.0], [47.4, 235.0], [47.5, 236.0], [47.6, 236.0], [47.7, 236.0], [47.8, 236.0], [47.9, 236.0], [48.0, 237.0], [48.1, 237.0], [48.2, 237.0], [48.3, 237.0], [48.4, 238.0], [48.5, 239.0], [48.6, 239.0], [48.7, 239.0], [48.8, 239.0], [48.9, 239.0], [49.0, 239.0], [49.1, 239.0], [49.2, 240.0], [49.3, 240.0], [49.4, 240.0], [49.5, 240.0], [49.6, 240.0], [49.7, 240.0], [49.8, 240.0], [49.9, 240.0], [50.0, 241.0], [50.1, 241.0], [50.2, 241.0], [50.3, 242.0], [50.4, 242.0], [50.5, 242.0], [50.6, 242.0], [50.7, 242.0], [50.8, 242.0], [50.9, 243.0], [51.0, 243.0], [51.1, 243.0], [51.2, 243.0], [51.3, 243.0], [51.4, 244.0], [51.5, 244.0], [51.6, 245.0], [51.7, 245.0], [51.8, 247.0], [51.9, 247.0], [52.0, 247.0], [52.1, 247.0], [52.2, 247.0], [52.3, 247.0], [52.4, 247.0], [52.5, 247.0], [52.6, 247.0], [52.7, 248.0], [52.8, 248.0], [52.9, 248.0], [53.0, 248.0], [53.1, 249.0], [53.2, 249.0], [53.3, 250.0], [53.4, 250.0], [53.5, 250.0], [53.6, 250.0], [53.7, 250.0], [53.8, 250.0], [53.9, 250.0], [54.0, 250.0], [54.1, 250.0], [54.2, 251.0], [54.3, 251.0], [54.4, 251.0], [54.5, 251.0], [54.6, 251.0], [54.7, 252.0], [54.8, 252.0], [54.9, 252.0], [55.0, 252.0], [55.1, 253.0], [55.2, 253.0], [55.3, 253.0], [55.4, 254.0], [55.5, 254.0], [55.6, 254.0], [55.7, 254.0], [55.8, 254.0], [55.9, 255.0], [56.0, 255.0], [56.1, 255.0], [56.2, 256.0], [56.3, 256.0], [56.4, 256.0], [56.5, 256.0], [56.6, 256.0], [56.7, 256.0], [56.8, 257.0], [56.9, 258.0], [57.0, 258.0], [57.1, 258.0], [57.2, 258.0], [57.3, 258.0], [57.4, 259.0], [57.5, 259.0], [57.6, 259.0], [57.7, 259.0], [57.8, 260.0], [57.9, 261.0], [58.0, 261.0], [58.1, 261.0], [58.2, 261.0], [58.3, 262.0], [58.4, 262.0], [58.5, 262.0], [58.6, 263.0], [58.7, 264.0], [58.8, 264.0], [58.9, 264.0], [59.0, 264.0], [59.1, 264.0], [59.2, 264.0], [59.3, 264.0], [59.4, 266.0], [59.5, 266.0], [59.6, 266.0], [59.7, 266.0], [59.8, 266.0], [59.9, 267.0], [60.0, 267.0], [60.1, 268.0], [60.2, 268.0], [60.3, 269.0], [60.4, 269.0], [60.5, 269.0], [60.6, 270.0], [60.7, 270.0], [60.8, 271.0], [60.9, 271.0], [61.0, 271.0], [61.1, 271.0], [61.2, 272.0], [61.3, 272.0], [61.4, 272.0], [61.5, 273.0], [61.6, 274.0], [61.7, 274.0], [61.8, 275.0], [61.9, 275.0], [62.0, 275.0], [62.1, 276.0], [62.2, 277.0], [62.3, 277.0], [62.4, 277.0], [62.5, 277.0], [62.6, 277.0], [62.7, 280.0], [62.8, 280.0], [62.9, 280.0], [63.0, 281.0], [63.1, 281.0], [63.2, 281.0], [63.3, 281.0], [63.4, 281.0], [63.5, 282.0], [63.6, 284.0], [63.7, 284.0], [63.8, 284.0], [63.9, 284.0], [64.0, 285.0], [64.1, 285.0], [64.2, 287.0], [64.3, 287.0], [64.4, 287.0], [64.5, 288.0], [64.6, 288.0], [64.7, 289.0], [64.8, 289.0], [64.9, 289.0], [65.0, 289.0], [65.1, 291.0], [65.2, 291.0], [65.3, 291.0], [65.4, 291.0], [65.5, 291.0], [65.6, 291.0], [65.7, 291.0], [65.8, 292.0], [65.9, 292.0], [66.0, 292.0], [66.1, 293.0], [66.2, 293.0], [66.3, 293.0], [66.4, 293.0], [66.5, 294.0], [66.6, 294.0], [66.7, 295.0], [66.8, 295.0], [66.9, 295.0], [67.0, 296.0], [67.1, 297.0], [67.2, 298.0], [67.3, 299.0], [67.4, 299.0], [67.5, 299.0], [67.6, 300.0], [67.7, 301.0], [67.8, 302.0], [67.9, 302.0], [68.0, 303.0], [68.1, 303.0], [68.2, 303.0], [68.3, 304.0], [68.4, 304.0], [68.5, 304.0], [68.6, 304.0], [68.7, 306.0], [68.8, 307.0], [68.9, 307.0], [69.0, 309.0], [69.1, 309.0], [69.2, 310.0], [69.3, 311.0], [69.4, 311.0], [69.5, 311.0], [69.6, 311.0], [69.7, 311.0], [69.8, 312.0], [69.9, 312.0], [70.0, 312.0], [70.1, 312.0], [70.2, 312.0], [70.3, 312.0], [70.4, 312.0], [70.5, 313.0], [70.6, 313.0], [70.7, 313.0], [70.8, 313.0], [70.9, 314.0], [71.0, 314.0], [71.1, 314.0], [71.2, 315.0], [71.3, 315.0], [71.4, 317.0], [71.5, 317.0], [71.6, 318.0], [71.7, 318.0], [71.8, 318.0], [71.9, 318.0], [72.0, 320.0], [72.1, 320.0], [72.2, 320.0], [72.3, 320.0], [72.4, 323.0], [72.5, 325.0], [72.6, 327.0], [72.7, 327.0], [72.8, 327.0], [72.9, 329.0], [73.0, 329.0], [73.1, 330.0], [73.2, 331.0], [73.3, 331.0], [73.4, 332.0], [73.5, 333.0], [73.6, 335.0], [73.7, 335.0], [73.8, 335.0], [73.9, 337.0], [74.0, 339.0], [74.1, 343.0], [74.2, 343.0], [74.3, 343.0], [74.4, 344.0], [74.5, 344.0], [74.6, 344.0], [74.7, 346.0], [74.8, 346.0], [74.9, 350.0], [75.0, 351.0], [75.1, 353.0], [75.2, 354.0], [75.3, 354.0], [75.4, 357.0], [75.5, 358.0], [75.6, 359.0], [75.7, 359.0], [75.8, 359.0], [75.9, 360.0], [76.0, 361.0], [76.1, 361.0], [76.2, 366.0], [76.3, 366.0], [76.4, 366.0], [76.5, 368.0], [76.6, 370.0], [76.7, 372.0], [76.8, 372.0], [76.9, 373.0], [77.0, 374.0], [77.1, 374.0], [77.2, 375.0], [77.3, 375.0], [77.4, 379.0], [77.5, 379.0], [77.6, 379.0], [77.7, 385.0], [77.8, 385.0], [77.9, 387.0], [78.0, 387.0], [78.1, 389.0], [78.2, 392.0], [78.3, 392.0], [78.4, 392.0], [78.5, 392.0], [78.6, 392.0], [78.7, 395.0], [78.8, 395.0], [78.9, 395.0], [79.0, 396.0], [79.1, 397.0], [79.2, 399.0], [79.3, 399.0], [79.4, 405.0], [79.5, 405.0], [79.6, 406.0], [79.7, 410.0], [79.8, 410.0], [79.9, 410.0], [80.0, 411.0], [80.1, 413.0], [80.2, 413.0], [80.3, 415.0], [80.4, 415.0], [80.5, 416.0], [80.6, 417.0], [80.7, 417.0], [80.8, 418.0], [80.9, 419.0], [81.0, 423.0], [81.1, 424.0], [81.2, 424.0], [81.3, 428.0], [81.4, 430.0], [81.5, 432.0], [81.6, 435.0], [81.7, 435.0], [81.8, 437.0], [81.9, 438.0], [82.0, 442.0], [82.1, 444.0], [82.2, 444.0], [82.3, 446.0], [82.4, 449.0], [82.5, 456.0], [82.6, 456.0], [82.7, 456.0], [82.8, 458.0], [82.9, 459.0], [83.0, 460.0], [83.1, 463.0], [83.2, 463.0], [83.3, 465.0], [83.4, 468.0], [83.5, 469.0], [83.6, 473.0], [83.7, 473.0], [83.8, 473.0], [83.9, 473.0], [84.0, 477.0], [84.1, 480.0], [84.2, 480.0], [84.3, 480.0], [84.4, 483.0], [84.5, 488.0], [84.6, 490.0], [84.7, 490.0], [84.8, 495.0], [84.9, 496.0], [85.0, 498.0], [85.1, 500.0], [85.2, 500.0], [85.3, 508.0], [85.4, 511.0], [85.5, 512.0], [85.6, 512.0], [85.7, 512.0], [85.8, 512.0], [85.9, 513.0], [86.0, 513.0], [86.1, 514.0], [86.2, 514.0], [86.3, 516.0], [86.4, 516.0], [86.5, 520.0], [86.6, 525.0], [86.7, 525.0], [86.8, 528.0], [86.9, 532.0], [87.0, 540.0], [87.1, 543.0], [87.2, 543.0], [87.3, 545.0], [87.4, 550.0], [87.5, 551.0], [87.6, 553.0], [87.7, 553.0], [87.8, 554.0], [87.9, 555.0], [88.0, 558.0], [88.1, 558.0], [88.2, 558.0], [88.3, 559.0], [88.4, 563.0], [88.5, 565.0], [88.6, 573.0], [88.7, 573.0], [88.8, 573.0], [88.9, 575.0], [89.0, 580.0], [89.1, 581.0], [89.2, 581.0], [89.3, 582.0], [89.4, 583.0], [89.5, 584.0], [89.6, 586.0], [89.7, 586.0], [89.8, 588.0], [89.9, 589.0], [90.0, 593.0], [90.1, 593.0], [90.2, 594.0], [90.3, 595.0], [90.4, 596.0], [90.5, 597.0], [90.6, 597.0], [90.7, 600.0], [90.8, 601.0], [90.9, 601.0], [91.0, 603.0], [91.1, 603.0], [91.2, 605.0], [91.3, 605.0], [91.4, 606.0], [91.5, 606.0], [91.6, 606.0], [91.7, 606.0], [91.8, 608.0], [91.9, 609.0], [92.0, 610.0], [92.1, 610.0], [92.2, 612.0], [92.3, 614.0], [92.4, 615.0], [92.5, 617.0], [92.6, 617.0], [92.7, 617.0], [92.8, 619.0], [92.9, 625.0], [93.0, 627.0], [93.1, 627.0], [93.2, 630.0], [93.3, 635.0], [93.4, 638.0], [93.5, 640.0], [93.6, 640.0], [93.7, 664.0], [93.8, 666.0], [93.9, 668.0], [94.0, 669.0], [94.1, 669.0], [94.2, 672.0], [94.3, 676.0], [94.4, 678.0], [94.5, 684.0], [94.6, 684.0], [94.7, 685.0], [94.8, 687.0], [94.9, 688.0], [95.0, 694.0], [95.1, 694.0], [95.2, 697.0], [95.3, 712.0], [95.4, 746.0], [95.5, 746.0], [95.6, 746.0], [95.7, 756.0], [95.8, 781.0], [95.9, 782.0], [96.0, 796.0], [96.1, 796.0], [96.2, 796.0], [96.3, 799.0], [96.4, 824.0], [96.5, 825.0], [96.6, 825.0], [96.7, 828.0], [96.8, 832.0], [96.9, 852.0], [97.0, 868.0], [97.1, 868.0], [97.2, 883.0], [97.3, 896.0], [97.4, 911.0], [97.5, 917.0], [97.6, 917.0], [97.7, 937.0], [97.8, 946.0], [97.9, 955.0], [98.0, 1056.0], [98.1, 1056.0], [98.2, 1096.0], [98.3, 1120.0], [98.4, 1164.0], [98.5, 1165.0], [98.6, 1165.0], [98.7, 1261.0], [98.8, 1282.0], [98.9, 1296.0], [99.0, 1303.0], [99.1, 1303.0], [99.2, 1457.0], [99.3, 1509.0], [99.4, 1602.0], [99.5, 1656.0], [99.6, 1656.0], [99.7, 1748.0], [99.8, 2392.0], [99.9, 4829.0]], "isOverall": false, "label": "Check request status and get content IDs ", "isController": false}, {"data": [[0.0, 581.0], [0.1, 581.0], [0.2, 612.0], [0.3, 619.0], [0.4, 623.0], [0.5, 623.0], [0.6, 623.0], [0.7, 635.0], [0.8, 638.0], [0.9, 647.0], [1.0, 647.0], [1.1, 654.0], [1.2, 658.0], [1.3, 663.0], [1.4, 663.0], [1.5, 663.0], [1.6, 670.0], [1.7, 673.0], [1.8, 678.0], [1.9, 679.0], [2.0, 679.0], [2.1, 680.0], [2.2, 683.0], [2.3, 683.0], [2.4, 684.0], [2.5, 684.0], [2.6, 690.0], [2.7, 692.0], [2.8, 693.0], [2.9, 697.0], [3.0, 697.0], [3.1, 700.0], [3.2, 700.0], [3.3, 702.0], [3.4, 704.0], [3.5, 704.0], [3.6, 706.0], [3.7, 709.0], [3.8, 709.0], [3.9, 710.0], [4.0, 710.0], [4.1, 714.0], [4.2, 714.0], [4.3, 714.0], [4.4, 717.0], [4.5, 717.0], [4.6, 717.0], [4.7, 720.0], [4.8, 723.0], [4.9, 724.0], [5.0, 724.0], [5.1, 725.0], [5.2, 726.0], [5.3, 728.0], [5.4, 730.0], [5.5, 730.0], [5.6, 730.0], [5.7, 732.0], [5.8, 732.0], [5.9, 732.0], [6.0, 732.0], [6.1, 734.0], [6.2, 734.0], [6.3, 734.0], [6.4, 736.0], [6.5, 736.0], [6.6, 738.0], [6.7, 739.0], [6.8, 739.0], [6.9, 741.0], [7.0, 741.0], [7.1, 743.0], [7.2, 744.0], [7.3, 745.0], [7.4, 746.0], [7.5, 746.0], [7.6, 748.0], [7.7, 749.0], [7.8, 750.0], [7.9, 752.0], [8.0, 752.0], [8.1, 755.0], [8.2, 757.0], [8.3, 758.0], [8.4, 758.0], [8.5, 758.0], [8.6, 761.0], [8.7, 762.0], [8.8, 762.0], [8.9, 762.0], [9.0, 762.0], [9.1, 763.0], [9.2, 764.0], [9.3, 766.0], [9.4, 766.0], [9.5, 766.0], [9.6, 767.0], [9.7, 768.0], [9.8, 769.0], [9.9, 771.0], [10.0, 771.0], [10.1, 772.0], [10.2, 772.0], [10.3, 772.0], [10.4, 773.0], [10.5, 773.0], [10.6, 773.0], [10.7, 774.0], [10.8, 774.0], [10.9, 776.0], [11.0, 776.0], [11.1, 777.0], [11.2, 779.0], [11.3, 780.0], [11.4, 780.0], [11.5, 780.0], [11.6, 782.0], [11.7, 784.0], [11.8, 784.0], [11.9, 785.0], [12.0, 785.0], [12.1, 786.0], [12.2, 789.0], [12.3, 789.0], [12.4, 789.0], [12.5, 789.0], [12.6, 789.0], [12.7, 790.0], [12.8, 791.0], [12.9, 792.0], [13.0, 792.0], [13.1, 792.0], [13.2, 792.0], [13.3, 792.0], [13.4, 794.0], [13.5, 794.0], [13.6, 795.0], [13.7, 800.0], [13.8, 801.0], [13.9, 803.0], [14.0, 803.0], [14.1, 803.0], [14.2, 803.0], [14.3, 804.0], [14.4, 805.0], [14.5, 805.0], [14.6, 805.0], [14.7, 806.0], [14.8, 810.0], [14.9, 810.0], [15.0, 810.0], [15.1, 810.0], [15.2, 810.0], [15.3, 810.0], [15.4, 811.0], [15.5, 811.0], [15.6, 813.0], [15.7, 813.0], [15.8, 814.0], [15.9, 814.0], [16.0, 814.0], [16.1, 815.0], [16.2, 816.0], [16.3, 816.0], [16.4, 817.0], [16.5, 817.0], [16.6, 817.0], [16.7, 819.0], [16.8, 821.0], [16.9, 822.0], [17.0, 822.0], [17.1, 822.0], [17.2, 823.0], [17.3, 824.0], [17.4, 824.0], [17.5, 824.0], [17.6, 826.0], [17.7, 826.0], [17.8, 829.0], [17.9, 830.0], [18.0, 830.0], [18.1, 830.0], [18.2, 831.0], [18.3, 833.0], [18.4, 834.0], [18.5, 834.0], [18.6, 835.0], [18.7, 835.0], [18.8, 835.0], [18.9, 835.0], [19.0, 835.0], [19.1, 836.0], [19.2, 839.0], [19.3, 840.0], [19.4, 842.0], [19.5, 842.0], [19.6, 842.0], [19.7, 842.0], [19.8, 842.0], [19.9, 843.0], [20.0, 843.0], [20.1, 843.0], [20.2, 844.0], [20.3, 844.0], [20.4, 844.0], [20.5, 844.0], [20.6, 846.0], [20.7, 849.0], [20.8, 850.0], [20.9, 850.0], [21.0, 850.0], [21.1, 851.0], [21.2, 851.0], [21.3, 854.0], [21.4, 854.0], [21.5, 854.0], [21.6, 855.0], [21.7, 857.0], [21.8, 857.0], [21.9, 857.0], [22.0, 858.0], [22.1, 858.0], [22.2, 859.0], [22.3, 859.0], [22.4, 859.0], [22.5, 859.0], [22.6, 860.0], [22.7, 861.0], [22.8, 862.0], [22.9, 862.0], [23.0, 862.0], [23.1, 863.0], [23.2, 863.0], [23.3, 864.0], [23.4, 864.0], [23.5, 864.0], [23.6, 864.0], [23.7, 865.0], [23.8, 866.0], [23.9, 866.0], [24.0, 866.0], [24.1, 867.0], [24.2, 867.0], [24.3, 869.0], [24.4, 869.0], [24.5, 871.0], [24.6, 874.0], [24.7, 875.0], [24.8, 875.0], [24.9, 875.0], [25.0, 875.0], [25.1, 878.0], [25.2, 879.0], [25.3, 879.0], [25.4, 879.0], [25.5, 880.0], [25.6, 880.0], [25.7, 880.0], [25.8, 881.0], [25.9, 881.0], [26.0, 883.0], [26.1, 885.0], [26.2, 885.0], [26.3, 887.0], [26.4, 887.0], [26.5, 887.0], [26.6, 889.0], [26.7, 890.0], [26.8, 890.0], [26.9, 890.0], [27.0, 891.0], [27.1, 892.0], [27.2, 892.0], [27.3, 892.0], [27.4, 892.0], [27.5, 892.0], [27.6, 893.0], [27.7, 893.0], [27.8, 893.0], [27.9, 893.0], [28.0, 894.0], [28.1, 895.0], [28.2, 895.0], [28.3, 896.0], [28.4, 896.0], [28.5, 896.0], [28.6, 896.0], [28.7, 897.0], [28.8, 897.0], [28.9, 897.0], [29.0, 897.0], [29.1, 897.0], [29.2, 898.0], [29.3, 900.0], [29.4, 900.0], [29.5, 903.0], [29.6, 906.0], [29.7, 906.0], [29.8, 906.0], [29.9, 906.0], [30.0, 908.0], [30.1, 908.0], [30.2, 908.0], [30.3, 909.0], [30.4, 909.0], [30.5, 909.0], [30.6, 911.0], [30.7, 911.0], [30.8, 911.0], [30.9, 911.0], [31.0, 911.0], [31.1, 912.0], [31.2, 914.0], [31.3, 916.0], [31.4, 916.0], [31.5, 916.0], [31.6, 916.0], [31.7, 917.0], [31.8, 918.0], [31.9, 918.0], [32.0, 921.0], [32.1, 922.0], [32.2, 923.0], [32.3, 926.0], [32.4, 926.0], [32.5, 926.0], [32.6, 927.0], [32.7, 928.0], [32.8, 928.0], [32.9, 928.0], [33.0, 929.0], [33.1, 930.0], [33.2, 930.0], [33.3, 930.0], [33.4, 930.0], [33.5, 932.0], [33.6, 935.0], [33.7, 935.0], [33.8, 936.0], [33.9, 936.0], [34.0, 936.0], [34.1, 937.0], [34.2, 937.0], [34.3, 937.0], [34.4, 937.0], [34.5, 938.0], [34.6, 939.0], [34.7, 940.0], [34.8, 940.0], [34.9, 940.0], [35.0, 940.0], [35.1, 940.0], [35.2, 942.0], [35.3, 942.0], [35.4, 942.0], [35.5, 943.0], [35.6, 944.0], [35.7, 946.0], [35.8, 947.0], [35.9, 947.0], [36.0, 947.0], [36.1, 947.0], [36.2, 948.0], [36.3, 948.0], [36.4, 948.0], [36.5, 948.0], [36.6, 950.0], [36.7, 950.0], [36.8, 950.0], [36.9, 950.0], [37.0, 950.0], [37.1, 953.0], [37.2, 954.0], [37.3, 956.0], [37.4, 956.0], [37.5, 956.0], [37.6, 957.0], [37.7, 957.0], [37.8, 958.0], [37.9, 958.0], [38.0, 958.0], [38.1, 958.0], [38.2, 959.0], [38.3, 959.0], [38.4, 959.0], [38.5, 960.0], [38.6, 961.0], [38.7, 961.0], [38.8, 962.0], [38.9, 962.0], [39.0, 962.0], [39.1, 963.0], [39.2, 963.0], [39.3, 964.0], [39.4, 964.0], [39.5, 964.0], [39.6, 964.0], [39.7, 965.0], [39.8, 965.0], [39.9, 965.0], [40.0, 965.0], [40.1, 967.0], [40.2, 969.0], [40.3, 969.0], [40.4, 969.0], [40.5, 969.0], [40.6, 970.0], [40.7, 971.0], [40.8, 971.0], [40.9, 972.0], [41.0, 973.0], [41.1, 973.0], [41.2, 974.0], [41.3, 974.0], [41.4, 974.0], [41.5, 975.0], [41.6, 979.0], [41.7, 979.0], [41.8, 979.0], [41.9, 980.0], [42.0, 981.0], [42.1, 982.0], [42.2, 983.0], [42.3, 983.0], [42.4, 985.0], [42.5, 985.0], [42.6, 986.0], [42.7, 987.0], [42.8, 987.0], [42.9, 988.0], [43.0, 988.0], [43.1, 990.0], [43.2, 991.0], [43.3, 991.0], [43.4, 993.0], [43.5, 993.0], [43.6, 993.0], [43.7, 994.0], [43.8, 994.0], [43.9, 995.0], [44.0, 996.0], [44.1, 996.0], [44.2, 997.0], [44.3, 997.0], [44.4, 997.0], [44.5, 997.0], [44.6, 997.0], [44.7, 999.0], [44.8, 999.0], [44.9, 1000.0], [45.0, 1001.0], [45.1, 1002.0], [45.2, 1003.0], [45.3, 1003.0], [45.4, 1005.0], [45.5, 1005.0], [45.6, 1006.0], [45.7, 1006.0], [45.8, 1006.0], [45.9, 1007.0], [46.0, 1010.0], [46.1, 1010.0], [46.2, 1011.0], [46.3, 1011.0], [46.4, 1012.0], [46.5, 1013.0], [46.6, 1017.0], [46.7, 1017.0], [46.8, 1017.0], [46.9, 1019.0], [47.0, 1019.0], [47.1, 1021.0], [47.2, 1021.0], [47.3, 1021.0], [47.4, 1023.0], [47.5, 1024.0], [47.6, 1024.0], [47.7, 1026.0], [47.8, 1026.0], [47.9, 1026.0], [48.0, 1028.0], [48.1, 1028.0], [48.2, 1029.0], [48.3, 1029.0], [48.4, 1030.0], [48.5, 1031.0], [48.6, 1032.0], [48.7, 1037.0], [48.8, 1037.0], [48.9, 1037.0], [49.0, 1039.0], [49.1, 1041.0], [49.2, 1041.0], [49.3, 1041.0], [49.4, 1041.0], [49.5, 1042.0], [49.6, 1042.0], [49.7, 1043.0], [49.8, 1043.0], [49.9, 1043.0], [50.0, 1044.0], [50.1, 1044.0], [50.2, 1046.0], [50.3, 1046.0], [50.4, 1046.0], [50.5, 1047.0], [50.6, 1047.0], [50.7, 1048.0], [50.8, 1048.0], [50.9, 1048.0], [51.0, 1048.0], [51.1, 1049.0], [51.2, 1051.0], [51.3, 1051.0], [51.4, 1054.0], [51.5, 1055.0], [51.6, 1056.0], [51.7, 1057.0], [51.8, 1057.0], [51.9, 1058.0], [52.0, 1058.0], [52.1, 1061.0], [52.2, 1063.0], [52.3, 1063.0], [52.4, 1065.0], [52.5, 1067.0], [52.6, 1068.0], [52.7, 1068.0], [52.8, 1068.0], [52.9, 1071.0], [53.0, 1073.0], [53.1, 1075.0], [53.2, 1075.0], [53.3, 1075.0], [53.4, 1076.0], [53.5, 1077.0], [53.6, 1079.0], [53.7, 1081.0], [53.8, 1081.0], [53.9, 1082.0], [54.0, 1083.0], [54.1, 1083.0], [54.2, 1084.0], [54.3, 1084.0], [54.4, 1087.0], [54.5, 1087.0], [54.6, 1091.0], [54.7, 1091.0], [54.8, 1091.0], [54.9, 1095.0], [55.0, 1096.0], [55.1, 1097.0], [55.2, 1100.0], [55.3, 1100.0], [55.4, 1102.0], [55.5, 1105.0], [55.6, 1111.0], [55.7, 1111.0], [55.8, 1111.0], [55.9, 1111.0], [56.0, 1114.0], [56.1, 1115.0], [56.2, 1115.0], [56.3, 1115.0], [56.4, 1117.0], [56.5, 1117.0], [56.6, 1118.0], [56.7, 1118.0], [56.8, 1118.0], [56.9, 1120.0], [57.0, 1122.0], [57.1, 1125.0], [57.2, 1125.0], [57.3, 1125.0], [57.4, 1125.0], [57.5, 1126.0], [57.6, 1128.0], [57.7, 1129.0], [57.8, 1129.0], [57.9, 1133.0], [58.0, 1134.0], [58.1, 1135.0], [58.2, 1136.0], [58.3, 1136.0], [58.4, 1137.0], [58.5, 1137.0], [58.6, 1139.0], [58.7, 1141.0], [58.8, 1141.0], [58.9, 1141.0], [59.0, 1142.0], [59.1, 1143.0], [59.2, 1145.0], [59.3, 1145.0], [59.4, 1147.0], [59.5, 1149.0], [59.6, 1151.0], [59.7, 1151.0], [59.8, 1151.0], [59.9, 1151.0], [60.0, 1152.0], [60.1, 1153.0], [60.2, 1153.0], [60.3, 1154.0], [60.4, 1154.0], [60.5, 1154.0], [60.6, 1155.0], [60.7, 1155.0], [60.8, 1155.0], [60.9, 1156.0], [61.0, 1157.0], [61.1, 1157.0], [61.2, 1157.0], [61.3, 1157.0], [61.4, 1158.0], [61.5, 1158.0], [61.6, 1158.0], [61.7, 1158.0], [61.8, 1159.0], [61.9, 1160.0], [62.0, 1164.0], [62.1, 1164.0], [62.2, 1164.0], [62.3, 1165.0], [62.4, 1165.0], [62.5, 1170.0], [62.6, 1171.0], [62.7, 1171.0], [62.8, 1171.0], [62.9, 1171.0], [63.0, 1174.0], [63.1, 1174.0], [63.2, 1174.0], [63.3, 1177.0], [63.4, 1179.0], [63.5, 1179.0], [63.6, 1182.0], [63.7, 1182.0], [63.8, 1182.0], [63.9, 1183.0], [64.0, 1184.0], [64.1, 1189.0], [64.2, 1189.0], [64.3, 1194.0], [64.4, 1194.0], [64.5, 1195.0], [64.6, 1195.0], [64.7, 1195.0], [64.8, 1197.0], [64.9, 1201.0], [65.0, 1201.0], [65.1, 1203.0], [65.2, 1203.0], [65.3, 1206.0], [65.4, 1207.0], [65.5, 1208.0], [65.6, 1209.0], [65.7, 1209.0], [65.8, 1211.0], [65.9, 1213.0], [66.0, 1215.0], [66.1, 1217.0], [66.2, 1217.0], [66.3, 1217.0], [66.4, 1218.0], [66.5, 1222.0], [66.6, 1225.0], [66.7, 1225.0], [66.8, 1226.0], [66.9, 1228.0], [67.0, 1233.0], [67.1, 1235.0], [67.2, 1235.0], [67.3, 1235.0], [67.4, 1235.0], [67.5, 1237.0], [67.6, 1240.0], [67.7, 1240.0], [67.8, 1241.0], [67.9, 1241.0], [68.0, 1242.0], [68.1, 1243.0], [68.2, 1243.0], [68.3, 1244.0], [68.4, 1244.0], [68.5, 1247.0], [68.6, 1248.0], [68.7, 1248.0], [68.8, 1250.0], [68.9, 1255.0], [69.0, 1257.0], [69.1, 1259.0], [69.2, 1259.0], [69.3, 1259.0], [69.4, 1259.0], [69.5, 1262.0], [69.6, 1262.0], [69.7, 1262.0], [69.8, 1268.0], [69.9, 1269.0], [70.0, 1269.0], [70.1, 1274.0], [70.2, 1274.0], [70.3, 1276.0], [70.4, 1277.0], [70.5, 1278.0], [70.6, 1279.0], [70.7, 1279.0], [70.8, 1279.0], [70.9, 1280.0], [71.0, 1280.0], [71.1, 1280.0], [71.2, 1280.0], [71.3, 1281.0], [71.4, 1281.0], [71.5, 1281.0], [71.6, 1282.0], [71.7, 1282.0], [71.8, 1284.0], [71.9, 1285.0], [72.0, 1286.0], [72.1, 1287.0], [72.2, 1287.0], [72.3, 1288.0], [72.4, 1288.0], [72.5, 1289.0], [72.6, 1289.0], [72.7, 1289.0], [72.8, 1295.0], [72.9, 1297.0], [73.0, 1298.0], [73.1, 1299.0], [73.2, 1299.0], [73.3, 1301.0], [73.4, 1302.0], [73.5, 1302.0], [73.6, 1306.0], [73.7, 1306.0], [73.8, 1307.0], [73.9, 1308.0], [74.0, 1308.0], [74.1, 1308.0], [74.2, 1308.0], [74.3, 1310.0], [74.4, 1312.0], [74.5, 1314.0], [74.6, 1315.0], [74.7, 1315.0], [74.8, 1316.0], [74.9, 1319.0], [75.0, 1323.0], [75.1, 1325.0], [75.2, 1325.0], [75.3, 1325.0], [75.4, 1325.0], [75.5, 1326.0], [75.6, 1326.0], [75.7, 1326.0], [75.8, 1327.0], [75.9, 1329.0], [76.0, 1332.0], [76.1, 1332.0], [76.2, 1332.0], [76.3, 1333.0], [76.4, 1339.0], [76.5, 1340.0], [76.6, 1342.0], [76.7, 1342.0], [76.8, 1345.0], [76.9, 1348.0], [77.0, 1348.0], [77.1, 1348.0], [77.2, 1348.0], [77.3, 1350.0], [77.4, 1356.0], [77.5, 1357.0], [77.6, 1360.0], [77.7, 1360.0], [77.8, 1361.0], [77.9, 1365.0], [78.0, 1366.0], [78.1, 1368.0], [78.2, 1368.0], [78.3, 1368.0], [78.4, 1368.0], [78.5, 1369.0], [78.6, 1369.0], [78.7, 1369.0], [78.8, 1370.0], [78.9, 1375.0], [79.0, 1377.0], [79.1, 1380.0], [79.2, 1380.0], [79.3, 1381.0], [79.4, 1382.0], [79.5, 1383.0], [79.6, 1383.0], [79.7, 1383.0], [79.8, 1385.0], [79.9, 1387.0], [80.0, 1389.0], [80.1, 1389.0], [80.2, 1392.0], [80.3, 1392.0], [80.4, 1393.0], [80.5, 1394.0], [80.6, 1394.0], [80.7, 1396.0], [80.8, 1397.0], [80.9, 1398.0], [81.0, 1399.0], [81.1, 1399.0], [81.2, 1400.0], [81.3, 1400.0], [81.4, 1400.0], [81.5, 1411.0], [81.6, 1411.0], [81.7, 1412.0], [81.8, 1421.0], [81.9, 1421.0], [82.0, 1422.0], [82.1, 1422.0], [82.2, 1424.0], [82.3, 1424.0], [82.4, 1426.0], [82.5, 1432.0], [82.6, 1432.0], [82.7, 1434.0], [82.8, 1435.0], [82.9, 1438.0], [83.0, 1439.0], [83.1, 1439.0], [83.2, 1439.0], [83.3, 1439.0], [83.4, 1441.0], [83.5, 1442.0], [83.6, 1442.0], [83.7, 1443.0], [83.8, 1444.0], [83.9, 1449.0], [84.0, 1450.0], [84.1, 1450.0], [84.2, 1451.0], [84.3, 1451.0], [84.4, 1460.0], [84.5, 1467.0], [84.6, 1467.0], [84.7, 1473.0], [84.8, 1475.0], [84.9, 1475.0], [85.0, 1477.0], [85.1, 1477.0], [85.2, 1481.0], [85.3, 1488.0], [85.4, 1488.0], [85.5, 1489.0], [85.6, 1489.0], [85.7, 1491.0], [85.8, 1491.0], [85.9, 1495.0], [86.0, 1498.0], [86.1, 1498.0], [86.2, 1499.0], [86.3, 1502.0], [86.4, 1508.0], [86.5, 1509.0], [86.6, 1509.0], [86.7, 1509.0], [86.8, 1509.0], [86.9, 1516.0], [87.0, 1518.0], [87.1, 1518.0], [87.2, 1520.0], [87.3, 1520.0], [87.4, 1523.0], [87.5, 1523.0], [87.6, 1523.0], [87.7, 1525.0], [87.8, 1526.0], [87.9, 1531.0], [88.0, 1532.0], [88.1, 1532.0], [88.2, 1534.0], [88.3, 1542.0], [88.4, 1547.0], [88.5, 1550.0], [88.6, 1550.0], [88.7, 1551.0], [88.8, 1552.0], [88.9, 1552.0], [89.0, 1553.0], [89.1, 1553.0], [89.2, 1553.0], [89.3, 1558.0], [89.4, 1563.0], [89.5, 1572.0], [89.6, 1572.0], [89.7, 1590.0], [89.8, 1593.0], [89.9, 1606.0], [90.0, 1606.0], [90.1, 1606.0], [90.2, 1611.0], [90.3, 1613.0], [90.4, 1613.0], [90.5, 1617.0], [90.6, 1617.0], [90.7, 1621.0], [90.8, 1631.0], [90.9, 1632.0], [91.0, 1635.0], [91.1, 1635.0], [91.2, 1637.0], [91.3, 1638.0], [91.4, 1643.0], [91.5, 1649.0], [91.6, 1649.0], [91.7, 1653.0], [91.8, 1655.0], [91.9, 1662.0], [92.0, 1664.0], [92.1, 1664.0], [92.2, 1665.0], [92.3, 1670.0], [92.4, 1671.0], [92.5, 1674.0], [92.6, 1674.0], [92.7, 1678.0], [92.8, 1679.0], [92.9, 1682.0], [93.0, 1684.0], [93.1, 1684.0], [93.2, 1691.0], [93.3, 1691.0], [93.4, 1711.0], [93.5, 1713.0], [93.6, 1713.0], [93.7, 1716.0], [93.8, 1719.0], [93.9, 1722.0], [94.0, 1723.0], [94.1, 1723.0], [94.2, 1729.0], [94.3, 1730.0], [94.4, 1737.0], [94.5, 1739.0], [94.6, 1739.0], [94.7, 1745.0], [94.8, 1749.0], [94.9, 1752.0], [95.0, 1755.0], [95.1, 1755.0], [95.2, 1768.0], [95.3, 1769.0], [95.4, 1772.0], [95.5, 1775.0], [95.6, 1775.0], [95.7, 1776.0], [95.8, 1778.0], [95.9, 1787.0], [96.0, 1796.0], [96.1, 1796.0], [96.2, 1805.0], [96.3, 1807.0], [96.4, 1830.0], [96.5, 1843.0], [96.6, 1843.0], [96.7, 1860.0], [96.8, 1865.0], [96.9, 1872.0], [97.0, 1887.0], [97.1, 1887.0], [97.2, 1917.0], [97.3, 1930.0], [97.4, 1949.0], [97.5, 1976.0], [97.6, 1976.0], [97.7, 1991.0], [97.8, 1995.0], [97.9, 2020.0], [98.0, 2044.0], [98.1, 2044.0], [98.2, 2070.0], [98.3, 2111.0], [98.4, 2114.0], [98.5, 2172.0], [98.6, 2172.0], [98.7, 2181.0], [98.8, 2191.0], [98.9, 2220.0], [99.0, 2273.0], [99.1, 2273.0], [99.2, 2321.0], [99.3, 2432.0], [99.4, 2449.0], [99.5, 2468.0], [99.6, 2468.0], [99.7, 2506.0], [99.8, 2735.0], [99.9, 2963.0]], "isOverall": false, "label": "Create Content ID request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 411.0, "series": [{"data": [[2300.0, 1.0], [600.0, 37.0], [700.0, 9.0], [200.0, 411.0], [800.0, 8.0], [900.0, 5.0], [1000.0, 2.0], [1100.0, 3.0], [300.0, 94.0], [1200.0, 3.0], [4800.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [100.0, 128.0], [400.0, 46.0], [1600.0, 2.0], [1700.0, 1.0], [500.0, 44.0]], "isOverall": false, "label": "Check request status and get content IDs ", "isController": false}, {"data": [[2100.0, 5.0], [2200.0, 2.0], [2300.0, 1.0], [600.0, 23.0], [2400.0, 3.0], [2500.0, 1.0], [700.0, 85.0], [2700.0, 1.0], [2900.0, 1.0], [800.0, 125.0], [900.0, 124.0], [1000.0, 83.0], [1100.0, 77.0], [1200.0, 67.0], [1300.0, 63.0], [1400.0, 41.0], [1500.0, 29.0], [1600.0, 28.0], [1700.0, 22.0], [1800.0, 8.0], [1900.0, 6.0], [500.0, 1.0], [2000.0, 3.0]], "isOverall": false, "label": "Create Content ID request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 800.0, "series": [{"data": [[0.0, 680.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 800.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 116.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72902354E12, "maxY": 1.0, "series": [{"data": [[1.72902372E12, 1.0], [1.72902438E12, 1.0], [1.72902468E12, 1.0], [1.72902402E12, 1.0], [1.72902432E12, 1.0], [1.72902414E12, 1.0], [1.72902444E12, 1.0], [1.72902408E12, 1.0], [1.72902474E12, 1.0], [1.72902378E12, 1.0], [1.7290242E12, 1.0], [1.7290239E12, 1.0], [1.72902384E12, 1.0], [1.7290245E12, 1.0], [1.72902354E12, 1.0], [1.72902396E12, 1.0], [1.72902462E12, 1.0], [1.72902366E12, 1.0], [1.7290236E12, 1.0], [1.72902426E12, 1.0], [1.72902456E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72902474E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 332.61027568922293, "minX": 1.0, "maxY": 1130.2002503128888, "series": [{"data": [[1.0, 332.61027568922293]], "isOverall": false, "label": "Check request status and get content IDs ", "isController": false}, {"data": [[1.0, 332.61027568922293]], "isOverall": false, "label": "Check request status and get content IDs -Aggregated", "isController": false}, {"data": [[1.0, 1130.2002503128888]], "isOverall": false, "label": "Create Content ID request", "isController": false}, {"data": [[1.0, 1130.2002503128888]], "isOverall": false, "label": "Create Content ID request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 206.01666666666668, "minX": 1.72902354E12, "maxY": 4382.6, "series": [{"data": [[1.72902372E12, 4200.133333333333], [1.72902438E12, 3743.5666666666666], [1.72902468E12, 2765.383333333333], [1.72902402E12, 4382.6], [1.72902432E12, 3261.116666666667], [1.72902414E12, 3535.2], [1.72902444E12, 3951.733333333333], [1.72902408E12, 3495.4], [1.72902474E12, 392.3], [1.72902378E12, 4199.766666666666], [1.7290242E12, 3560.75], [1.7290239E12, 4317.416666666667], [1.72902384E12, 4017.266666666667], [1.7290245E12, 3626.35], [1.72902354E12, 2008.65], [1.72902396E12, 4174.2], [1.72902462E12, 2830.6666666666665], [1.72902366E12, 4083.0333333333333], [1.7290236E12, 4316.883333333333], [1.72902426E12, 2856.45], [1.72902456E12, 3195.633333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72902372E12, 3084.3], [1.72902438E12, 2749.05], [1.72902468E12, 2073.6833333333334], [1.72902402E12, 3218.4], [1.72902432E12, 2351.616666666667], [1.72902414E12, 2552.766666666667], [1.72902444E12, 2945.3333333333335], [1.72902408E12, 2610.0833333333335], [1.72902474E12, 206.01666666666668], [1.72902378E12, 3084.3], [1.7290242E12, 2614.95], [1.7290239E12, 3213.5333333333333], [1.72902384E12, 2950.2], [1.7290245E12, 2619.8166666666666], [1.72902354E12, 1475.1], [1.72902396E12, 3022.116666666667], [1.72902462E12, 2078.55], [1.72902366E12, 2955.0666666666666], [1.7290236E12, 3213.5333333333333], [1.72902426E12, 2140.733333333333], [1.72902456E12, 2346.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72902474E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 247.063829787234, "minX": 1.72902354E12, "maxY": 1766.75, "series": [{"data": [[1.72902372E12, 259.84782608695645], [1.72902438E12, 324.87804878048786], [1.72902468E12, 350.5333333333333], [1.72902402E12, 305.00000000000006], [1.72902432E12, 402.8888888888888], [1.72902414E12, 373.43589743589746], [1.72902444E12, 336.0697674418604], [1.72902408E12, 320.4736842105263], [1.72902474E12, 368.75], [1.72902378E12, 322.97826086956525], [1.7290242E12, 362.48717948717945], [1.7290239E12, 247.063829787234], [1.72902384E12, 289.02272727272725], [1.7290245E12, 329.9249999999999], [1.72902354E12, 277.7272727272727], [1.72902396E12, 295.8913043478262], [1.72902462E12, 474.93548387096797], [1.72902366E12, 273.88888888888886], [1.7290236E12, 260.1702127659574], [1.72902426E12, 565.451612903226], [1.72902456E12, 422.1714285714286]], "isOverall": false, "label": "Check request status and get content IDs ", "isController": false}, {"data": [[1.72902372E12, 1023.695652173913], [1.72902438E12, 1154.9268292682927], [1.72902468E12, 1644.0322580645156], [1.72902402E12, 955.3333333333333], [1.72902432E12, 1265.257142857143], [1.72902414E12, 1175.9473684210525], [1.72902444E12, 1031.25], [1.72902408E12, 1223.4102564102561], [1.72902474E12, 1766.75], [1.72902378E12, 988.9565217391306], [1.7290242E12, 1149.9487179487176], [1.7290239E12, 1019.1041666666669], [1.72902384E12, 1068.0227272727273], [1.7290245E12, 1176.9487179487178], [1.72902354E12, 803.5909090909091], [1.72902396E12, 1015.4444444444446], [1.72902462E12, 1424.4193548387098], [1.72902366E12, 1075.4090909090908], [1.7290236E12, 997.5], [1.72902426E12, 1337.3437499999998], [1.72902456E12, 1284.7714285714285]], "isOverall": false, "label": "Create Content ID request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72902474E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 247.0212765957446, "minX": 1.72902354E12, "maxY": 1644.0322580645156, "series": [{"data": [[1.72902372E12, 259.804347826087], [1.72902438E12, 324.8292682926828], [1.72902468E12, 350.5333333333333], [1.72902402E12, 304.9791666666666], [1.72902432E12, 402.8888888888888], [1.72902414E12, 373.30769230769226], [1.72902444E12, 336.02325581395365], [1.72902408E12, 320.4736842105263], [1.72902474E12, 368.75], [1.72902378E12, 322.9347826086956], [1.7290242E12, 362.3589743589745], [1.7290239E12, 247.0212765957446], [1.72902384E12, 289.02272727272725], [1.7290245E12, 329.9], [1.72902354E12, 277.7272727272727], [1.72902396E12, 295.8913043478262], [1.72902462E12, 474.9032258064517], [1.72902366E12, 273.8444444444444], [1.7290236E12, 260.14893617021283], [1.72902426E12, 565.3548387096774], [1.72902456E12, 422.1142857142857]], "isOverall": false, "label": "Check request status and get content IDs ", "isController": false}, {"data": [[1.72902372E12, 1023.695652173913], [1.72902438E12, 1154.6341463414635], [1.72902468E12, 1644.0322580645156], [1.72902402E12, 955.2708333333335], [1.72902432E12, 1265.257142857143], [1.72902414E12, 1175.9473684210525], [1.72902444E12, 1031.1818181818182], [1.72902408E12, 1223.3589743589737], [1.72902474E12, 1433.5], [1.72902378E12, 988.9130434782608], [1.7290242E12, 1149.897435897436], [1.7290239E12, 1019.0625], [1.72902384E12, 1067.9545454545453], [1.7290245E12, 1176.9230769230771], [1.72902354E12, 803.5454545454545], [1.72902396E12, 1015.4], [1.72902462E12, 1424.3548387096773], [1.72902366E12, 1075.386363636364], [1.7290236E12, 997.4791666666669], [1.72902426E12, 1337.2499999999998], [1.72902456E12, 1284.7714285714285]], "isOverall": false, "label": "Create Content ID request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72902474E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72902354E12, "maxY": 36.861111111111114, "series": [{"data": [[1.72902372E12, 0.0], [1.72902438E12, 5.1951219512195115], [1.72902468E12, 5.766666666666667], [1.72902402E12, 6.687500000000001], [1.72902432E12, 36.861111111111114], [1.72902414E12, 7.282051282051282], [1.72902444E12, 11.046511627906977], [1.72902408E12, 4.868421052631578], [1.72902474E12, 0.0], [1.72902378E12, 4.195652173913044], [1.7290242E12, 4.794871794871796], [1.7290239E12, 3.4468085106382977], [1.72902384E12, 0.0], [1.7290245E12, 0.0], [1.72902354E12, 0.0], [1.72902396E12, 3.934782608695652], [1.72902462E12, 14.903225806451614], [1.72902366E12, 0.0], [1.7290236E12, 3.4468085106382977], [1.72902426E12, 5.838709677419354], [1.72902456E12, 0.0]], "isOverall": false, "label": "Check request status and get content IDs ", "isController": false}, {"data": [[1.72902372E12, 7.4565217391304355], [1.72902438E12, 0.0], [1.72902468E12, 0.0], [1.72902402E12, 0.0], [1.72902432E12, 0.0], [1.72902414E12, 0.0], [1.72902444E12, 0.0], [1.72902408E12, 0.0], [1.72902474E12, 0.0], [1.72902378E12, 0.0], [1.7290242E12, 0.0], [1.7290239E12, 0.0], [1.72902384E12, 3.7045454545454546], [1.7290245E12, 4.897435897435897], [1.72902354E12, 7.545454545454544], [1.72902396E12, 0.0], [1.72902462E12, 0.0], [1.72902366E12, 3.386363636363636], [1.7290236E12, 0.0], [1.72902426E12, 0.0], [1.72902456E12, 5.485714285714287]], "isOverall": false, "label": "Create Content ID request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72902474E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 173.0, "minX": 1.72902354E12, "maxY": 4829.0, "series": [{"data": [[1.72902372E12, 1830.0], [1.72902438E12, 2273.0], [1.72902468E12, 2735.0], [1.72902402E12, 1637.0], [1.72902432E12, 2506.0], [1.72902414E12, 1991.0], [1.72902444E12, 1807.0], [1.72902408E12, 2449.0], [1.72902474E12, 2044.0], [1.72902378E12, 1730.0], [1.7290242E12, 2321.0], [1.7290239E12, 1865.0], [1.72902384E12, 1737.0], [1.7290245E12, 2432.0], [1.72902354E12, 1451.0], [1.72902396E12, 1716.0], [1.72902462E12, 2392.0], [1.72902366E12, 1796.0], [1.7290236E12, 1749.0], [1.72902426E12, 4829.0], [1.72902456E12, 2111.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72902372E12, 173.0], [1.72902438E12, 194.0], [1.72902468E12, 186.0], [1.72902402E12, 186.0], [1.72902432E12, 185.0], [1.72902414E12, 188.0], [1.72902444E12, 188.0], [1.72902408E12, 186.0], [1.72902474E12, 222.0], [1.72902378E12, 180.0], [1.7290242E12, 184.0], [1.7290239E12, 178.0], [1.72902384E12, 184.0], [1.7290245E12, 192.0], [1.72902354E12, 189.0], [1.72902396E12, 183.0], [1.72902462E12, 193.0], [1.72902366E12, 185.0], [1.7290236E12, 179.0], [1.72902426E12, 186.0], [1.72902456E12, 191.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72902372E12, 1255.4], [1.72902438E12, 1334.8], [1.72902468E12, 1878.2000000000003], [1.72902402E12, 1156.9], [1.72902432E12, 1640.3999999999999], [1.72902414E12, 1464.2], [1.72902444E12, 1304.4], [1.72902408E12, 1550.2], [1.72902474E12, 2044.0], [1.72902378E12, 1166.2], [1.7290242E12, 1401.9000000000008], [1.7290239E12, 1185.0000000000002], [1.72902384E12, 1285.4], [1.7290245E12, 1400.0], [1.72902354E12, 993.5], [1.72902396E12, 1291.8], [1.72902462E12, 1731.0000000000002], [1.72902366E12, 1281.0], [1.7290236E12, 1227.8000000000004], [1.72902426E12, 1665.6000000000001], [1.72902456E12, 1596.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72902372E12, 1830.0], [1.72902438E12, 2273.0], [1.72902468E12, 2735.0], [1.72902402E12, 1637.0], [1.72902432E12, 2506.0], [1.72902414E12, 1991.0], [1.72902444E12, 1807.0], [1.72902408E12, 2449.0], [1.72902474E12, 2044.0], [1.72902378E12, 1730.0], [1.7290242E12, 2321.0], [1.7290239E12, 1865.0], [1.72902384E12, 1737.0], [1.7290245E12, 2432.0], [1.72902354E12, 1451.0], [1.72902396E12, 1716.0], [1.72902462E12, 2392.0], [1.72902366E12, 1796.0], [1.7290236E12, 1749.0], [1.72902426E12, 4829.0], [1.72902456E12, 2111.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72902372E12, 682.5], [1.72902438E12, 673.0], [1.72902468E12, 1164.0], [1.72902402E12, 659.0], [1.72902432E12, 849.0], [1.72902414E12, 741.0], [1.72902444E12, 739.0], [1.72902408E12, 810.0], [1.72902474E12, 781.0], [1.72902378E12, 684.5], [1.7290242E12, 803.0], [1.7290239E12, 726.0], [1.72902384E12, 681.0], [1.7290245E12, 693.0], [1.72902354E12, 593.5], [1.72902396E12, 725.0], [1.72902462E12, 1111.5], [1.72902366E12, 663.0], [1.7290236E12, 663.0], [1.72902426E12, 960.0], [1.72902456E12, 885.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72902372E12, 1357.4499999999998], [1.72902438E12, 1605.1499999999999], [1.72902468E12, 2062.5], [1.72902402E12, 1271.55], [1.72902432E12, 1732.9999999999998], [1.72902414E12, 1532.2999999999993], [1.72902444E12, 1576.3999999999996], [1.72902408E12, 1680.1999999999973], [1.72902474E12, 2044.0], [1.72902378E12, 1340.0499999999997], [1.7290242E12, 1529.3999999999996], [1.7290239E12, 1407.7999999999995], [1.72902384E12, 1405.5499999999997], [1.7290245E12, 1745.0], [1.72902354E12, 1276.0], [1.72902396E12, 1550.9999999999993], [1.72902462E12, 1895.8499999999992], [1.72902366E12, 1516.0], [1.7290236E12, 1385.4], [1.72902426E12, 2147.9999999999995], [1.72902456E12, 1712.6000000000001]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72902474E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 619.0, "minX": 1.0, "maxY": 1333.0, "series": [{"data": [[2.0, 671.0], [1.0, 883.0], [3.0, 619.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1333.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 883.0, "series": [{"data": [[2.0, 671.0], [1.0, 883.0], [3.0, 619.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.72902354E12, "maxY": 1.6, "series": [{"data": [[1.72902372E12, 1.5333333333333334], [1.72902438E12, 1.3666666666666667], [1.72902468E12, 1.0166666666666666], [1.72902402E12, 1.6], [1.72902432E12, 1.1833333333333333], [1.72902414E12, 1.2833333333333334], [1.72902444E12, 1.45], [1.72902408E12, 1.2833333333333334], [1.72902474E12, 0.11666666666666667], [1.72902378E12, 1.5333333333333334], [1.7290242E12, 1.3], [1.7290239E12, 1.5833333333333333], [1.72902384E12, 1.4666666666666666], [1.7290245E12, 1.3166666666666667], [1.72902354E12, 0.75], [1.72902396E12, 1.5166666666666666], [1.72902462E12, 1.0333333333333334], [1.72902366E12, 1.4833333333333334], [1.7290236E12, 1.5833333333333333], [1.72902426E12, 1.05], [1.72902456E12, 1.1666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72902474E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72902354E12, "maxY": 1.6, "series": [{"data": [[1.72902372E12, 1.5333333333333334], [1.72902438E12, 1.3666666666666667], [1.72902468E12, 1.0166666666666666], [1.72902402E12, 1.6], [1.72902432E12, 1.1833333333333333], [1.72902414E12, 1.2833333333333334], [1.72902444E12, 1.45], [1.72902408E12, 1.2833333333333334], [1.72902474E12, 0.11666666666666667], [1.72902378E12, 1.5333333333333334], [1.7290242E12, 1.3], [1.7290239E12, 1.5833333333333333], [1.72902384E12, 1.4666666666666666], [1.7290245E12, 1.3166666666666667], [1.72902354E12, 0.7333333333333333], [1.72902396E12, 1.5166666666666666], [1.72902462E12, 1.0333333333333334], [1.72902366E12, 1.4833333333333334], [1.7290236E12, 1.5833333333333333], [1.72902426E12, 1.05], [1.72902456E12, 1.1666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72902474E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72902474E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72902354E12, "maxY": 0.8, "series": [{"data": [[1.72902372E12, 0.7666666666666667], [1.72902438E12, 0.6833333333333333], [1.72902468E12, 0.5166666666666667], [1.72902402E12, 0.8], [1.72902432E12, 0.5833333333333334], [1.72902414E12, 0.6333333333333333], [1.72902444E12, 0.7333333333333333], [1.72902408E12, 0.65], [1.72902474E12, 0.05], [1.72902378E12, 0.7666666666666667], [1.7290242E12, 0.65], [1.7290239E12, 0.8], [1.72902384E12, 0.7333333333333333], [1.7290245E12, 0.65], [1.72902354E12, 0.36666666666666664], [1.72902396E12, 0.75], [1.72902462E12, 0.5166666666666667], [1.72902366E12, 0.7333333333333333], [1.7290236E12, 0.8], [1.72902426E12, 0.5333333333333333], [1.72902456E12, 0.5833333333333334]], "isOverall": false, "label": "Create Content ID request-success", "isController": false}, {"data": [[1.72902474E12, 0.016666666666666666]], "isOverall": false, "label": "Create Content ID request-failure", "isController": false}, {"data": [[1.72902372E12, 0.7666666666666667], [1.72902438E12, 0.6833333333333333], [1.72902468E12, 0.5], [1.72902402E12, 0.8], [1.72902432E12, 0.6], [1.72902414E12, 0.65], [1.72902444E12, 0.7166666666666667], [1.72902408E12, 0.6333333333333333], [1.72902474E12, 0.06666666666666667], [1.72902378E12, 0.7666666666666667], [1.7290242E12, 0.65], [1.7290239E12, 0.7833333333333333], [1.72902384E12, 0.7333333333333333], [1.7290245E12, 0.6666666666666666], [1.72902354E12, 0.36666666666666664], [1.72902396E12, 0.7666666666666667], [1.72902462E12, 0.5166666666666667], [1.72902366E12, 0.75], [1.7290236E12, 0.7833333333333333], [1.72902426E12, 0.5166666666666667], [1.72902456E12, 0.5833333333333334]], "isOverall": false, "label": "Check request status and get content IDs -success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72902474E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72902354E12, "maxY": 1.6, "series": [{"data": [[1.72902372E12, 1.5333333333333334], [1.72902438E12, 1.3666666666666667], [1.72902468E12, 1.0166666666666666], [1.72902402E12, 1.6], [1.72902432E12, 1.1833333333333333], [1.72902414E12, 1.2833333333333334], [1.72902444E12, 1.45], [1.72902408E12, 1.2833333333333334], [1.72902474E12, 0.11666666666666667], [1.72902378E12, 1.5333333333333334], [1.7290242E12, 1.3], [1.7290239E12, 1.5833333333333333], [1.72902384E12, 1.4666666666666666], [1.7290245E12, 1.3166666666666667], [1.72902354E12, 0.7333333333333333], [1.72902396E12, 1.5166666666666666], [1.72902462E12, 1.0333333333333334], [1.72902366E12, 1.4833333333333334], [1.7290236E12, 1.5833333333333333], [1.72902426E12, 1.05], [1.72902456E12, 1.1666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72902474E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72902474E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

